<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.zhoumai.qingtao">

    <!-- 配置友盟的 开始 -->
    <uses-sdk android:minSdkVersion="4"></uses-sdk>

    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
    <!-- 配置友盟的 结束 -->

    <!--权限-->
    <uses-permission android:name="android.permission.GET_TASKS" />
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS" />
    <uses-permission android:name="android.permission.GET_ACCOUNTS" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.CAMERA" /><!--动态请求-->
    <uses-permission android:name="android.permission.READ_CONTACTS" /><!--动态请求-->
    <!--配置application -->
    <application
        android:name=".view.base.application.MyApp"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"

        android:theme="@style/Theme.PageIndicatorDefault">


        <!-- splash界面  -->
        <activity
            android:name=".view.activity.SplashActivity"
            android:theme="@style/Theme.AppCompat.Light.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- 引导界面 -->
        <activity
            android:name=".view.activity.GuideActivity"
            android:theme="@style/Theme.AppCompat.Light.NoActionBar" />
        <!-- 主界面--><!--PageIndicatorDefaults-->
        <activity android:name=".view.activity.MainActivity"

            />


        <!--登录界面 -->
        <activity android:name=".view.activity.LoginActivity" />

        <!--设置的界面-->

        <activity android:name=".view.activity.settings.SettingActivity" />

        <!-- 基类 -->
        <activity android:name=".view.activity.BaseActivity" /><!-- android:theme="@style/Theme.AppCompat" -->
        <activity android:name=".view.activity.SearchActivity" />
        <activity android:name=".view.activity.BusinessActivity" />
        <activity android:name=".view.activity.settings.ReviseNameActivity" />
        <activity android:name=".view.activity.settings.AddAddressActivity" />
        <activity android:name=".view.activity.settings.AddAddressActivity1" />
        <activity android:name=".view.activity.settings.EmilActivity" />


        <!--配置友盟-->
        <meta-data
            android:name="UMENG_APPKEY"
            android:value="5833e576677baa1c18000993" />
        <meta-data
            android:name="UMENG_CHANNEL"
            android:value="${UMENG_CHANNEL_VALUE}" /> <!-- 多渠道打包  占位符配置 需要gradle配置集合 替换 UMENG_CHANNEL_VALUE-->


        <!--自动适配-->
        <meta-data
            android:name="design_width"
            android:value="1080" />
        /
        <meta-data
            android:name="design_height"
            android:value="1280" />


    </application>
    <!--https://developer.android.com/training/permissions/requesting.html  android 的权限设置 -->
</manifest>


    <!--2.2.3  填写appkey
    将<meta-data android:value="YOUR_APP_KEY " android:name="UMENG_APPKEY"></meta-data>  中的YOUR_APP_KEY 替换为您在友盟后台申请的应用Appkey（Appkey可在统计后台的 统计分析->设置->应用信息 页面查看），其他部分均不需改动。

    2.2.4  channel填写
    将<meta-data android:value="Channel ID" android:name="UMENG_CHANNEL"/>  中的Channel ID 替换为您应用的推广渠道名称，channel id自定义。

    例如在豌豆荚渠道推广此包，代码示例： <meta-data android:value="Wandoujia" android:name="UMENG_CHANNEL"/>
-->


    <!--
    session的统计
    在每个Activity的onResume方法中调用 MobclickAgent.onResume(Context) ,
    onPause方法中调用 MobclickAgent.onPause(Context)

    public void onResume() {
    super.onResume();
    MobclickAgent.onResume(this);
    }
    public void onPause() {
    super.onPause();
    MobclickAgent.onPause(this);
    }

    确保在所有的Activity中都调用 MobclickAgent.onResume() 和MobclickAgent.onPause()方法，这两个调用将不会阻塞应用程序的主线程，也不会影响应用程序的性能。
    注意 如果您的Activity之间有继承或者控制关系请不要同时在父和子Activity中重复添加onPause和onResume方法，否则会造成重复统计，导致启动次数异常增高。(eg.使用TabHost、TabActivity、ActivityGroup时)。
    当应用在后台运行超过30秒（默认）再回到前端，将被认为是两个独立的session(启动)，例如用户回到home，或进入其他程序，经过一段时间后再返回之前的应用。可通过接口：MobclickAgent.setSessionContinueMillis(long interval) 来自定义这个间隔（参数单位为毫秒）。
    如果开发者调用Process.kill或者System.exit之类的方法杀死进程，请务必在此之前调用MobclickAgent.onKillProcess(Context context)方法，用来保存统计数据。

    --><!--
如果是activity和fragment应用中
首先禁用需要在程序入口处，调用 MobclickAgent.openActivityDurationTrack(false)  禁止默认的页面统计方式，这样将不会再自动统计Activity。
如果页面是使用FragmentActivity + Fragment实现的，需要在 FragmentActivity 中统计时长：

public void onResume() {
    super.onResume();
    MobclickAgent.onResume(this);       //统计时长
}
public void onPause() {
    super.onPause();
    MobclickAgent.onPause(this);
}

并在其包含的 Fragment 中统计页面：

public void onResume() {
    super.onResume();
    MobclickAgent.onPageStart("MainScreen"); //统计页面，"MainScreen"为页面名称，可自定义
}
public void onPause() {
    super.onPause();
    MobclickAgent.onPageEnd("MainScreen");
}

注意：这些方法的调用，需要保证线性不交叉，每个 onResume 都对应一个 onPause ，每个 Start 都有一个 End 配对。这样才能保证每个页面统计的正确，关于页面统计API的最佳实践说明见这里 。
-->

    <!--


    发送策略设置方法
    您可以在后台 统计分析->设置->发送策略  页面自定义发送间隔
    -->

    <!--
    日志加密
    MobclickAgent.enableEncrypt(boolean enable);//6.0.0版本及以后 默认false 不加密
    -->

    <!--
      社交统计
     只需要调用一行代码，便可享用到丰富的社交行为和社交用户分析报表。

    在发生社交行为，比如分享了到新浪微博之后，调用这样一行代码：

    UMPlatformData platform = new UMPlatformData(UMedia.SINA_WEIBO, "user_id");
    platform.setGender(GENDER.MALE); //optional
    platform.setWeiboId("weiboId");  //optional
    MobclickAgent.onSocialEvent(this, platform);

    会把分享信息发送到友盟服务器, 我们会通过这些信息创建社交行为报表。

    相关参数说明： UMPlatformData：
    UMeida meida 平台枚举类型（必填）
    String user_id 用户的id（必填）
    String weiboId  微博id
    String name 用户姓名
    GENDER gender  用户性别


     -->


    <!--
    所有由注册设备发送的应用日志将实时地进行展示，您可以方便地查看包括应用版本、渠道名称、自定义事件、页面访问情况等数据，提升集成与调试的工作效率。

    注意：  使用集成测试之后，所有测试数据不会进入应用正式的统计后台，只能在“管理-集成测试-实时日志”里查看，您不必再担心因为测试而导致的数据污染问题，让数据更加真实有效的反应用户使用情况。

    使用集成测试模式请先在程序入口处调用如下代码，打开调试模式：

    MobclickAgent.setDebugMode( true );


    -->

